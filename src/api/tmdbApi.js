import axios from "axios";

const TMDB_API_KEY = "b56be59cfcfc26fbad50e51fb6341736"; // üîë Ïã§Ï†ú TMDB API ÌÇ§Î•º ÏûÖÎ†•ÌïòÏÑ∏Ïöî.
const BASE_URL = "https://api.themoviedb.org/3";
const IMAGE_BASE_URL = "https://image.tmdb.org/t/p/w780";

/**
 * KOFIC Íµ≠Í∞Ä Ïù¥Î¶ÑÏùÑ TMDB Ïñ∏Ïñ¥ ÏΩîÎìúÎ°ú Î≥ÄÌôò
 */
const convertNationToLangCode = (nationName) => {
  const langMap = {
    "ÌïúÍµ≠": "ko", "ÎØ∏Íµ≠": "en", "ÏùºÎ≥∏": "ja", "ÏòÅÍµ≠": "en",
    "ÌîÑÎûëÏä§": "fr", "Ï§ëÍµ≠": "zh", "ÌôçÏΩ©": "zh", "ÎåÄÎßå": "zh",
    "Ï∫êÎÇòÎã§": "en", "ÎèÖÏùº": "de", "Ïä§ÌéòÏù∏": "es", "Ïù¥ÌÉàÎ¶¨ÏïÑ": "it",
  };
  return langMap[nationName] || null;
};

export const getPosterFromTMDB = async (title, year, options = {}) => {
  try {
    // 1. ÌïúÍ∏Ä/ÏòÅÎ¨∏ Ï†úÎ™©ÏúºÎ°ú Î™®Îì† ÌõÑÎ≥¥Íµ∞ Í≤ÄÏÉâ (Í∏∞Ï°¥Í≥º ÎèôÏùº)
    const searchPromises = [
      axios.get(`${BASE_URL}/search/movie`, { params: { api_key: TMDB_API_KEY, query: title, language: "ko-KR", include_adult: false } }),
    ];
    if (options.movieNmEn) {
      searchPromises.push(axios.get(`${BASE_URL}/search/movie`, { params: { api_key: TMDB_API_KEY, query: options.movieNmEn, language: "ko-KR", include_adult: false } }));
    }
    const responses = await Promise.all(searchPromises);
    const allResults = responses.flatMap(res => res.data.results);
    const uniqueResults = Array.from(new Map(allResults.map(movie => [movie.id, movie])).values());

    if (uniqueResults.length === 0) return null;

    // --- ÏÉàÎ°úÏö¥ Îß§Ïπ≠ Î°úÏßÅ (Ïó∞ÎèÑ Ïö∞ÏÑ†) ---
    const getYear = (dateString) => dateString?.substring(0, 4);
    const yearNum = year ? parseInt(year) : 0;
    const langCode = options.nation ? convertNationToLangCode(options.nation) : null;

    // 1ÏàúÏúÑ: 'Ïñ∏Ïñ¥'ÏôÄ 'Ïó∞ÎèÑ(¬±2ÎÖÑ)'Í∞Ä Î™®Îëê ÏùºÏπòÌïòÎäî ÏµúÏÉÅÏùò Í≤ΩÏö∞
    if (langCode && yearNum) {
      const langAndFlexibleYearMatches = uniqueResults.filter(m => {
        const releaseYearStr = getYear(m.release_date);
        if (!releaseYearStr) return false;
        const yearDiff = Math.abs(parseInt(releaseYearStr) - yearNum);
        return m.original_language === langCode && yearDiff <= 2;
      });
      if (langAndFlexibleYearMatches.length > 0) {
        const mostPopular = langAndFlexibleYearMatches.sort((a,b) => b.popularity - a.popularity)[0];
        console.log(`‚úÖ [Ïñ∏Ïñ¥+Ïú†Ïó∞Ïó∞ÎèÑ ÏùºÏπò] "${title}"`);
        return `${IMAGE_BASE_URL}${mostPopular.poster_path}`;
      }
    }

    // ‚≠êÔ∏è 2ÏàúÏúÑ: (Ïã†ÏÑ§) Ïñ∏Ïñ¥Îäî Î¨¥ÏãúÌïòÍ≥†, 'Ï†ïÌôïÌïú Ïó∞ÎèÑ'Í∞Ä ÏùºÏπòÌïòÎäî Í≤ΩÏö∞
    if (yearNum) {
      const perfectYearMatches = uniqueResults.filter(m => getYear(m.release_date) === year);
      if (perfectYearMatches.length > 0) {
        const mostPopular = perfectYearMatches.sort((a,b) => b.popularity - a.popularity)[0];
        console.log(`ü§î [Ï†ïÌôïÌïú Ïó∞ÎèÑ Ïö∞ÏÑ† ÏùºÏπò] "${title}" (${year})`);
        return `${IMAGE_BASE_URL}${mostPopular.poster_path}`;
      }
    }
    
    // ‚≠êÔ∏è 3ÏàúÏúÑ: (Ïã†ÏÑ§) 'Í∑ºÏ†ë Ïó∞ÎèÑ(¬±2ÎÖÑ)'ÎùºÎèÑ ÏùºÏπòÌïòÎäî Í≤ΩÏö∞
    if (yearNum) {
        const flexibleYearMatches = uniqueResults.filter(m => {
            const releaseYearStr = getYear(m.release_date);
            if (!releaseYearStr) return false;
            return Math.abs(parseInt(releaseYearStr) - yearNum) <= 2;
        });
        if (flexibleYearMatches.length > 0) {
            const mostPopular = flexibleYearMatches.sort((a,b) => b.popularity - a.popularity)[0];
            console.log(`‚ö†Ô∏è [Í∑ºÏ†ë Ïó∞ÎèÑ Ïö∞ÏÑ† ÏùºÏπò] "${title}" (${year}¬±2)`);
            return `${IMAGE_BASE_URL}${mostPopular.poster_path}`;
        }
    }

    // 4ÏàúÏúÑ: Ïó∞ÎèÑ Ï†ïÎ≥¥Í∞Ä ÏóÜÏùÑ Îïå, 'Ïñ∏Ïñ¥'ÎßåÏúºÎ°ú ÏùºÏπòÌïòÎäî Í≤ΩÏö∞
    if (langCode) {
      const langMatches = uniqueResults.filter(m => m.original_language === langCode);
      if (langMatches.length > 0) {
        const mostPopular = langMatches.sort((a,b) => b.popularity - a.popularity)[0];
        console.log(`üí° [Ïñ∏Ïñ¥ Ïö∞ÏÑ† ÏùºÏπò] "${title}"`);
        return `${IMAGE_BASE_URL}${mostPopular.poster_path}`;
      }
    }

    // 5ÏàúÏúÑ: ÏµúÌõÑÏùò ÏàòÎã®, Ï†ÑÏ≤¥ Í≤∞Í≥ºÏóêÏÑú ÏµúÍ≥† Ïù∏Í∏∞ ÏòÅÌôî ÏÑ†ÌÉù
    const bestGuess = uniqueResults.sort((a, b) => b.popularity - a.popularity)[0];
    console.log(`‚ùì [ÏµúÏÑ† Ï∂îÏ∏°] "${title}"`);
    return `${IMAGE_BASE_URL}${bestGuess.poster_path}`;

  } catch (error) {
    console.error(`TMDB API Ïò§Î•ò (${title}):`, error.message);
    return null;
  }
};